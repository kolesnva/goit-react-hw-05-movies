{"version":3,"file":"static/js/491.3fba7cd6.chunk.js","mappings":"qPAEaA,EAAWC,EAAAA,GAAAA,GAAH,4KAKZ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEGC,EAAWJ,EAAAA,GAAAA,GAAH,8DAEV,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,KAAnB,I,SC8BZ,MAnCA,WACE,OAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaH,GAASI,MAAK,SAAAC,GAAQ,OAAIN,EAAY,OAACM,QAAD,IAACA,OAAD,EAACA,EAAUC,KAA3B,GACpC,GAAE,CAACN,KAGF,8BACGF,IACC,SAACT,EAAD,UACGS,EAAUS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAb,OACb,UAAChB,EAAD,YACE,gBACEiB,IAAG,yCAAoCD,GACvCE,IAAKH,KAEP,uBAAIA,MALSD,EADF,OAaxB,C,2MC7BKK,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBC,IAAAA,IAAA,qCAAwCF,IAF5D,uBAEKG,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHC,QAAQC,IAAI,KAAMC,SALf,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kFACCC,EAAe,IAAIC,gBAAgB,CACvCC,QAASX,EACTY,MAAOJ,EACPK,KAAM,IAJH,kBAOoBX,IAAAA,IAAA,uBAA0BO,IAP9C,uBAOKN,EAPL,EAOKA,KAPL,kBAQIA,GARJ,gCAUHC,QAAQC,IAAI,KAAMC,SAVf,gFAcA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA4B3B,GAA5B,kGAEoBe,IAAAA,IAAA,gBAAmBf,EAAnB,oBAAsCa,IAF1D,uBAEKG,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAef,EAAtB,+CAAO,OAAP,oBAAO,WAA4BH,GAA5B,kGAEoBe,IAAAA,IAAA,gBACZf,EADY,4BACea,IAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA+B5B,GAA/B,kGAEoBe,IAAAA,IAAA,gBACZf,EADY,4BACea,IAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAR,MAPG,gFA7CPH,IAAAA,SAAAA,QAAyB,+B","sources":["pages/Cast/CastStyled.js","pages/Cast/Cast.js","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-rows: auto;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: ${p => p.theme.space[1]}px;\n`;\nexport const CastItem = styled.li`\n  text-align: center;\n  color: ${p => p.theme.colors.white};\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getMovieCast } from 'services/moviesAPI';\nimport { CastList, CastItem } from './CastStyled';\n\nfunction Cast() {\n  const [movieCast, setMovieCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCast(movieId).then(response => setMovieCast(response?.cast));\n  }, [movieId]);\n\n  return (\n    <>\n      {movieCast && (\n        <CastList>\n          {movieCast.map(({ id, name, profile_path }) => (\n            <CastItem key={id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                alt={name}\n              />\n              <p>{name}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n    </>\n  );\n}\n\nCast.propTypes = {\n  movieCast: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string.isRequired,\n  }),\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'f0766e9050bf27a2816eaba7638d5b74';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies() {\n  try {\n    const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport async function getMoviesByName(searchQuery) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    query: searchQuery,\n    page: 1,\n  });\n  try {\n    const { data } = await axios.get(`search/movie?${searchParams}`);\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport async function getMovieById(movieId) {\n  try {\n    const { data } = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const { data } = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const { data } = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["CastList","styled","p","theme","space","CastItem","colors","white","useState","movieCast","setMovieCast","movieId","useParams","useEffect","getMovieCast","then","response","cast","map","id","name","profile_path","src","alt","API_KEY","getTrendingMovies","axios","data","console","log","message","getMoviesByName","searchQuery","searchParams","URLSearchParams","api_key","query","page","getMovieById","getMovieReviews"],"sourceRoot":""}