{"version":3,"file":"static/js/63.2e059d49.chunk.js","mappings":"yQAGaA,EAAYC,EAAAA,GAAAA,QAAH,6DAET,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEDC,EAASJ,EAAAA,GAAAA,IAAH,sBACNK,EAAaL,EAAAA,GAAAA,GAAH,yCAGVM,EAAcN,EAAAA,GAAAA,GAAH,6CAGXO,EAAcP,EAAAA,GAAAA,GAAH,kEAEL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,GAGeH,EAAAA,GAAAA,GAAH,uBACTA,EAAAA,EAAAA,IAAOQ,EAAAA,GAAPR,CAAH,sBACGA,EAAAA,GAAAA,OAAH,sB,QCoCpB,MA9CA,WACE,OAA0BS,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaH,GAASI,KAAKL,EAC5B,GAAE,CAACC,KAGF,8BACGF,IACC,UAACX,EAAD,YACE,iBAAKkB,MAAO,CAAEC,UAAW,UAAzB,WACE,SAACb,EAAD,oBAAgBK,EAAMS,MAAtB,aAAgCT,EAAMU,aAAaC,MACjD,EACA,GAFF,QAIA,SAACjB,EAAD,CACEkB,IAAG,yCAAoCZ,EAAMa,aAC7CC,IAAKd,EAAMS,YAGf,UAACb,EAAD,YACE,UAACC,EAAD,YACE,eAAIU,MAAO,CAAEC,UAAW,UAAxB,qBACA,cAAGD,MAAO,CAAEC,UAAW,UAAvB,SAAoCR,EAAMe,eAE5C,SAAClB,EAAD,WACE,eAAIU,MAAO,CAAEC,UAAW,UAAxB,+BACkC,GAAhCR,EAAMgB,aAAaC,QAAQ,GAD7B,UAIF,UAACpB,EAAD,YACE,eAAIU,MAAO,CAAEC,UAAW,UAAxB,sBACA,cAAGD,MAAO,CAAEC,UAAW,UAAvB,SACGR,EAAMkB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,kBAQ3D,C,2MCrDKC,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBC,IAAAA,IAAA,qCAAwCF,IAF5D,uBAEKG,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHC,QAAQC,IAAI,KAAMC,SALf,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kFACCC,EAAe,IAAIC,gBAAgB,CACvCC,QAASX,EACTY,MAAOJ,EACPK,KAAM,IAJH,kBAOoBX,IAAAA,IAAA,uBAA0BO,IAP9C,uBAOKN,EAPL,EAOKA,KAPL,kBAQIA,GARJ,gCAUHC,QAAQC,IAAI,KAAMC,SAVf,gFAcA,SAAexB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BH,GAA5B,kGAEoBuB,IAAAA,IAAA,gBAAmBvB,EAAnB,oBAAsCqB,IAF1D,uBAEKG,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAA4BnC,GAA5B,kGAEoBuB,IAAAA,IAAA,gBACZvB,EADY,4BACeqB,IAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA+BpC,GAA/B,kGAEoBuB,IAAAA,IAAA,gBACZvB,EADY,4BACeqB,IAHnC,uBAEKG,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAR,MAPG,gFA7CPH,IAAAA,SAAAA,QAAyB,+B","sources":["components/MovieInfo/MovieInfoStyled.js","components/MovieInfo/MovieInfo.js","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Container = styled.section`\n  display: flex;\n  padding: ${p => p.theme.space[4]}px;\n`;\nexport const Poster = styled.img``;\nexport const MovieTitle = styled.h2`\n  color: white;\n`;\nexport const CreditsList = styled.ul`\n  list-style: none;\n`;\nexport const CreditsItem = styled.li`\n  color: white;\n  margin-bottom: ${p => p.theme.space[5]}px;\n`;\n\nexport const MovieNavigationWrap = styled.ul``;\nexport const NavItem = styled(NavLink)``;\nexport const BackBtn = styled.button``;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieById } from 'services/moviesAPI';\nimport {\n  Poster,\n  MovieTitle,\n  CreditsList,\n  CreditsItem,\n  Container,\n} from './MovieInfoStyled';\n\nfunction MovieInfo() {\n  const [movie, setMovie] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieById(movieId).then(setMovie);\n  }, [movieId]);\n\n  return (\n    <>\n      {movie && (\n        <Container>\n          <div style={{ textAlign: 'center' }}>\n            <MovieTitle>{`${movie.title} (${movie.release_date.slice(\n              0,\n              4\n            )})`}</MovieTitle>\n            <Poster\n              src={`https://image.tmdb.org/t/p/w400${movie.poster_path}`}\n              alt={movie.title}\n            />\n          </div>\n          <CreditsList>\n            <CreditsItem>\n              <h3 style={{ textAlign: 'center' }}>About:</h3>\n              <p style={{ textAlign: 'center' }}>{movie.overview}</p>\n            </CreditsItem>\n            <CreditsItem>\n              <h3 style={{ textAlign: 'center' }}>{`User score: ${\n                movie.vote_average.toFixed(2) * 10\n              }%`}</h3>\n            </CreditsItem>\n            <CreditsItem>\n              <h3 style={{ textAlign: 'center' }}>Genres:</h3>\n              <p style={{ textAlign: 'center' }}>\n                {movie.genres.map(genre => genre.name).join(', ')}\n              </p>\n            </CreditsItem>\n          </CreditsList>\n        </Container>\n      )}\n    </>\n  );\n}\n\nexport default MovieInfo;\n","import axios from 'axios';\n\nconst API_KEY = 'f0766e9050bf27a2816eaba7638d5b74';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies() {\n  try {\n    const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport async function getMoviesByName(searchQuery) {\n  const searchParams = new URLSearchParams({\n    api_key: API_KEY,\n    query: searchQuery,\n    page: 1,\n  });\n  try {\n    const { data } = await axios.get(`search/movie?${searchParams}`);\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport async function getMovieById(movieId) {\n  try {\n    const { data } = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const { data } = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const { data } = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["Container","styled","p","theme","space","Poster","MovieTitle","CreditsList","CreditsItem","NavLink","useState","movie","setMovie","movieId","useParams","useEffect","getMovieById","then","style","textAlign","title","release_date","slice","src","poster_path","alt","overview","vote_average","toFixed","genres","map","genre","name","join","API_KEY","getTrendingMovies","axios","data","console","log","message","getMoviesByName","searchQuery","searchParams","URLSearchParams","api_key","query","page","getMovieCast","getMovieReviews"],"sourceRoot":""}